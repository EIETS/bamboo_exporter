# .github/workflows/release.yml - Ëá™Âä®ÂèëÂ∏É (Âü∫‰∫éVERSIONÊñá‰ª∂)
name: Auto Release

on:
  push:
    branches: [ main ]  # ÂΩìPRÂêàÂπ∂Âà∞mainÊó∂Ëß¶Âèë

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Ëé∑ÂèñÂÆåÊï¥ÂéÜÂè≤ÔºåÁî®‰∫éÁîüÊàêchangelog

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.1'

    - name: Check VERSION file and determine release
      id: version
      run: |
        # Ê£ÄÊü•VERSIONÊñá‰ª∂ÊòØÂê¶Â≠òÂú®
        if [ ! -f "VERSION" ]; then
          echo "‚ùå VERSION file not found!"
          echo "Please create a VERSION file in the root directory with format: 1.0.0"
          exit 1
        fi

        # ËØªÂèñVERSIONÊñá‰ª∂ÂÜÖÂÆπ
        CURRENT_VERSION=$(cat VERSION | tr -d '[:space:]')
        echo "Version in file: $CURRENT_VERSION"

        # È™åËØÅÁâàÊú¨Ê†ºÂºè (x.y.z)
        if ! echo "$CURRENT_VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
          echo "‚ùå Invalid version format in VERSION file: $CURRENT_VERSION"
          echo "Expected format: x.y.z (e.g., 1.0.0)"
          exit 1
        fi

        # Ê∑ªÂä†vÂâçÁºÄ
        NEW_VERSION="v${CURRENT_VERSION}"

        # Ëé∑ÂèñÊúÄÂêé‰∏Ä‰∏™tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Last release tag: $LAST_TAG"
        echo "New version: $NEW_VERSION"

        # Ê£ÄÊü•ÁâàÊú¨ÊòØÂê¶ÊúâÂèòÂåñ
        if [ "$NEW_VERSION" = "$LAST_TAG" ]; then
          echo "‚úÖ Version $NEW_VERSION already released, skipping..."
          echo "skip_release=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Ê£ÄÊü•ÁâàÊú¨ÊòØÂê¶ÊØî‰∏ä‰∏Ä‰∏™ÁâàÊú¨Êñ∞
        if [ "$LAST_TAG" != "v0.0.0" ]; then
          LAST_VERSION=$(echo $LAST_TAG | sed 's/v//')
          if ! printf '%s\n%s\n' "$LAST_VERSION" "$CURRENT_VERSION" | sort -V -C; then
            echo "‚ö†Ô∏è Warning: New version $CURRENT_VERSION is not higher than last version $LAST_VERSION"
            echo "This might indicate a version rollback or incorrect versioning"
          fi
        fi

        echo "‚úÖ Version changed from $LAST_TAG to $NEW_VERSION, creating release..."
        echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT

        # ÁîüÊàêchangelog
        if [ "$LAST_TAG" = "v0.0.0" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse HEAD)
        else
          CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse)
        fi

        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Build binaries
      if: steps.version.outputs.skip_release != 'true'
      run: |
        VERSION=${{ steps.version.outputs.current_version }}
        mkdir -p dist

        platforms=("linux/amd64" "linux/arm64" "windows/amd64" "darwin/amd64" "darwin/arm64")

        for platform in "${platforms[@]}"; do
          platform_split=(${platform//\// })
          GOOS=${platform_split[0]}
          GOARCH=${platform_split[1]}

          output_name="bamboo-exporter-v${VERSION}-${GOOS}-${GOARCH}"
          if [ "$GOOS" = "windows" ]; then
            output_name+='.exe'
          fi

          echo "Building for $GOOS/$GOARCH..."
          env CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build \
            -ldflags="-s -w -X main.version=v${VERSION}" \
            -o dist/$output_name .

          cd dist
          if [ "$GOOS" = "windows" ]; then
            zip ${output_name%.exe}.zip $output_name
            rm $output_name
          else
            tar -czf ${output_name}.tar.gz $output_name
            rm $output_name
          fi
          cd ..
        done

    - name: Create Release
      if: steps.version.outputs.skip_release != 'true'
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.new_version }}
        release_name: Release ${{ steps.version.outputs.new_version }}
        body: |
          ## üöÄ What's New

          ${{ steps.version.outputs.changelog }}

          ## üì¶ Download

          ÈÄâÊã©ÈÄÇÂêà‰Ω†Âπ≥Âè∞ÁöÑ‰∫åËøõÂà∂Êñá‰ª∂‰∏ãËΩΩÔºö
          - **Linux (x64)**: `bamboo-exporter-${{ steps.version.outputs.new_version }}-linux-amd64.tar.gz`
          - **Linux (ARM64)**: `bamboo-exporter-${{ steps.version.outputs.new_version }}-linux-arm64.tar.gz`
          - **Windows (x64)**: `bamboo-exporter-${{ steps.version.outputs.new_version }}-windows-amd64.zip`
          - **macOS (Intel)**: `bamboo-exporter-${{ steps.version.outputs.new_version }}-darwin-amd64.tar.gz`
          - **macOS (Apple Silicon)**: `bamboo-exporter-${{ steps.version.outputs.new_version }}-darwin-arm64.tar.gz`
        draft: false
        prerelease: false

    - name: Upload Release Assets
      if: steps.version.outputs.skip_release != 'true'
      run: |
        upload_url="${{ steps.create_release.outputs.upload_url }}"

        for file in dist/*; do
          filename=$(basename "$file")
          echo "Uploading $filename..."
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Content-Type: application/octet-stream" \
               --data-binary @"$file" \
               "${upload_url%{?name,label}*}?name=$filename"
        done
